// Code generated by go-bindata. DO NOT EDIT.
// sources:
// vim_template/langs/c/c.bundle
// vim_template/langs/c/c.vim
// vim_template/langs/elixir/elixir.bundle
// vim_template/langs/elixir/elixir.vim
// vim_template/langs/elm/elm.bundle
// vim_template/langs/elm/elm.vim
// vim_template/langs/erlang/erlang.bundle
// vim_template/langs/erlang/erlang.vim
// vim_template/langs/go/go.bundle
// vim_template/langs/go/go.vim
// vim_template/langs/haskell/haskell.bundle
// vim_template/langs/haskell/haskell.sh
// vim_template/langs/haskell/haskell.vim
// vim_template/langs/html/html.bundle
// vim_template/langs/html/html.vim
// vim_template/langs/javascript/javascript.bundle
// vim_template/langs/javascript/javascript.vim
// vim_template/langs/lisp/lisp.bundle
// vim_template/langs/lisp/lisp.vim
// vim_template/langs/lua/lua.bundle
// vim_template/langs/lua/lua.vim
// vim_template/langs/ocaml/ocaml.bundle
// vim_template/langs/ocaml/ocaml.vim
// vim_template/langs/perl/perl.bundle
// vim_template/langs/perl/perl.vim
// vim_template/langs/php/php.bundle
// vim_template/langs/php/php.vim
// vim_template/langs/python/python.bundle
// vim_template/langs/python/python.vim
// vim_template/langs/ruby/ruby.bundle
// vim_template/langs/ruby/ruby.vim
// vim_template/langs/rust/rust.bundle
// vim_template/langs/rust/rust.vim
// vim_template/langs/scala/scala.bundle
// vim_template/langs/scala/scala.vim
// vim_template/vimrc
// vim_template/vimrc.local.bundles.example
// vim_template/vimrc.local.example

package generate

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _vim_templateLangsCCBundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x4e\x2e\xca\x2c\x28\x29\xd6" +
	"\x4f\xd6\x2b\xcb\xcc\x55\xd7\x51\xa8\x56\x4f\xcb\x2f\x52\xb7\x52\x88\x56\x4f\x56\xd7\x51\x50\x4f\x2e\x28\x50\x8f" +
	"\xad\xe5\x82\xa8\xcf\x29\x4d\x29\xcf\x4c\xd7\x2f\x2e\xc8\xc9\x2c\xd1\xcd\x4d\xcc\x2b\x48\x4c\x4f\x05\x6b\xe3\x02" +
	"\x04\x00\x00\xff\xff\x31\xce\x53\x1e\x50\x00\x00\x00")

func vim_templateLangsCCBundleBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsCCBundle,
		"vim_template/langs/c/c.bundle",
	)
}

func vim_templateLangsCCBundle() (*asset, error) {
	bytes, err := vim_templateLangsCCBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/c/c.bundle", size: 80, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsCCVim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\x2d\xc9\x4f\xce\x4d\x51\x70\xcb\xcc\x49\x0d\xa9\x2c\x48\x55\x48" +
	"\x56\x28\x4e\x2d\xc9\xc9\x4f\x4e\xcc\x51\x28\x49\x4c\x2a\x2e\xc9\x2f\xb0\x35\x51\x28\xce\xc8\x4c\x2b\x29\xcf\x4c" +
	"\x29\xc9\xb0\x35\x51\x48\xad\x28\x48\xcc\x4b\x29\x49\x4c\xe2\xc2\xd4\x5c\x50\x40\x82\x76\x40\x00\x00\x00\xff\xff" +
	"\x6c\x20\xcb\xdc\x7c\x00\x00\x00")

func vim_templateLangsCCVimBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsCCVim,
		"vim_template/langs/c/c.vim",
	)
}

func vim_templateLangsCCVim() (*asset, error) {
	bytes, err := vim_templateLangsCCVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/c/c.vim", size: 124, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsElixirElixirBundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x4f\xcd\xc9\xac\xc8\x2c\xd2\xcd\x49\xcc\x4b\xd7" +
	"\x2f\xcb\xcc\xd5\x85\xf0\xd5\xb9\x20\xb2\xc9\x89\x45\x39\xf9\xc5\xe9\x89\x39\x29\x99\x79\xf9\xfa\x50\xb5\xc5\x79" +
	"\x99\x05\x05\xa9\x25\xc5\xea\x5c\x80\x00\x00\x00\xff\xff\x2d\x52\x6c\x8c\x43\x00\x00\x00")

func vim_templateLangsElixirElixirBundleBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsElixirElixirBundle,
		"vim_template/langs/elixir/elixir.bundle",
	)
}

func vim_templateLangsElixirElixirBundle() (*asset, error) {
	bytes, err := vim_templateLangsElixirElixirBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/elixir/elixir.bundle", size: 67, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsElixirElixirVim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func vim_templateLangsElixirElixirVimBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsElixirElixirVim,
		"vim_template/langs/elixir/elixir.vim",
	)
}

func vim_templateLangsElixirElixirVim() (*asset, error) {
	bytes, err := vim_templateLangsElixirElixirVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/elixir/elixir.vim", size: 0, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsElmElmBundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x70\xcd\xc9\x55\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d" +
	"\x57\x50\x4f\xcd\xc9\x4d\x4e\x2c\x2e\xd1\x4f\xcd\xc9\xd5\x2d\xcb\xcc\x55\xe7\x02\x04\x00\x00\xff\xff\xef\x8a\x4d" +
	"\x83\x25\x00\x00\x00")

func vim_templateLangsElmElmBundleBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsElmElmBundle,
		"vim_template/langs/elm/elm.bundle",
	)
}

func vim_templateLangsElmElmBundle() (*asset, error) {
	bytes, err := vim_templateLangsElmElmBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/elm/elm.bundle", size: 37, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsElmElmVim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcf\x41\x6a\x86\x40\x0c\x05\xe0\xfd\x9c\x22\xfc\x1b\x57\x42\xdd\x16" +
	"\x3c\x49\x29\x21\x6a\x6a\x87\x66\x26\x83\xc9\x28\x73\xfb\x52\xb1\x52\xe8\xbf\x7c\xe4\x0b\x8f\xf7\x00\x96\xd4\xef" +
	"\x31\x05\x61\x87\xf5\x95\x25\xa1\xb1\xd7\x82\x5f\xdc\xa6\x98\x97\x98\x57\x83\x11\x5e\xfe\xdc\x3f\x74\x4b\xe4\x48" +
	"\xd5\xd5\x68\x67\x18\x61\x08\xe1\x01\x7b\x4c\x7d\x51\x69\xab\xa8\x5f\xfa\x37\xe2\x12\x8d\x26\xe1\x05\x46\x78\xeb" +
	"\x58\x52\xf7\xfe\xf3\x61\x2d\x3b\x99\xc7\xf9\xe2\x77\x46\x92\x83\x9a\x61\xd1\x52\x85\x9c\x51\x74\x46\x89\xe6\x67" +
	"\xd7\x3f\x5c\x5d\x9f\x89\x73\xcb\xad\xec\x53\x0f\x3c\x68\xcb\xd7\xa2\x21\x7c\x07\x00\x00\xff\xff\x86\xce\x5c\x85" +
	"\xfc\x00\x00\x00")

func vim_templateLangsElmElmVimBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsElmElmVim,
		"vim_template/langs/elm/elm.vim",
	)
}

func vim_templateLangsElmElmVim() (*asset, error) {
	bytes, err := vim_templateLangsElmElmVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/elm/elm.vim", size: 252, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsErlangErlangBundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\xcf\xca\xcc\x4d\xcd\x4b\xad\x2a\xca\x4c\xce\xd6" +
	"\x2f\xcb\xcc\x4d\x2d\xca\x51\xe7\x02\x04\x00\x00\xff\xff\x84\x19\x0a\xa2\x1a\x00\x00\x00")

func vim_templateLangsErlangErlangBundleBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsErlangErlangBundle,
		"vim_template/langs/erlang/erlang.bundle",
	)
}

func vim_templateLangsErlangErlangBundle() (*asset, error) {
	bytes, err := vim_templateLangsErlangErlangBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/erlang/erlang.bundle", size: 26, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsErlangErlangVim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x49\x2d\x51\x48\x2d\xca\x49\xcc\x4b\x8f\x4f\xcb\xcf\x49\xc9\xcc\x4b" +
	"\x57\xb0\x55\x30\xe4\x42\x12\x2e\xce\xc8\x2f\x8f\x4f\x2d\x2a\xca\x2f\x2a\x06\x4b\x01\x02\x00\x00\xff\xff\xb5\xe4" +
	"\x0c\x62\x32\x00\x00\x00")

func vim_templateLangsErlangErlangVimBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsErlangErlangVim,
		"vim_template/langs/erlang/erlang.vim",
	)
}

func vim_templateLangsErlangErlangVim() (*asset, error) {
	bytes, err := vim_templateLangsErlangErlangVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/erlang/erlang.vim", size: 50, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsGoGoBundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x70\xcf\x57\xf0\x49\xcc\x4b\x57\x70\x2a\xcd\x4b\xc9\x49\xe5" +
	"\x0a\xc8\x29\x4d\x57\x50\x4f\x4b\x2c\xc9\xcc\xd0\x2f\xcb\xcc\xd5\x4d\xcf\x57\xd7\x51\xa8\x56\x4f\xc9\x57\xb7\x52" +
	"\x50\xb7\x72\xcf\xf7\xcc\x2b\x2e\x49\xcc\xc9\x71\xca\xcc\x4b\x2c\xca\x4c\x2d\x56\xaf\xe5\x02\x04\x00\x00\xff\xff" +
	"\x5d\x19\x18\x70\x44\x00\x00\x00")

func vim_templateLangsGoGoBundleBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsGoGoBundle,
		"vim_template/langs/go/go.bundle",
	)
}

func vim_templateLangsGoGoBundle() (*asset, error) {
	bytes, err := vim_templateLangsGoGoBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/go/go.bundle", size: 68, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsGoGoVim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x96\x51\x6f\xdb\x36\x10\xc7\xdf\xf5\x29\xce\xc9\x16\x39\x5d\x5c\xa4" +
	"\xd8\x86\x6d\x86\x2d\x60\x89\xd7\x61\xc0\x50\x0c\x4d\xb0\x97\xa5\x13\x28\xea\x44\x11\xa5\x78\x1a\x79\x92\x13\x2c" +
	"\xeb\x67\x1f\x28\x29\x8e\x92\x46\xb5\x5f\x82\x48\xf7\xff\xfd\xef\x8e\xd4\x91\x3e\x82\x56\x57\x0b\x45\xd1\x11\xb8" +
	"\xc6\xc2\xf2\x57\xba\x68\xb4\xc9\x81\x5c\xf8\xff\x1a\x3d\x5f\x52\x55\x6b\x83\x90\x09\x8f\x39\x90\x05\x2e\x11\x14" +
	"\x41\xa1\x0d\x46\x45\x63\x25\x6b\xb2\x33\xf0\xcb\x2c\x80\xa9\xa2\x34\x44\xfc\xfc\x34\x02\x30\xc8\x60\x96\xe1\x19" +
	"\xd6\x80\xb7\xb5\xb0\xf9\x3c\xfe\x3a\x0e\x21\x5d\xec\x22\x9f\x8e\x21\xfe\xfb\xa6\xb8\xf9\x26\x65\xf4\x7c\xf3\x5a" +
	"\xd1\x57\x71\x04\x00\x20\x85\x31\xa0\xe8\x38\xbc\x3e\x0e\xb5\xcc\xcf\xcf\xe0\x4d\xa0\xd1\x78\x7c\xc9\xe1\x05\x58" +
	"\x56\xf9\x71\xd7\xd3\xfc\xbc\x23\x6d\xae\x8b\x08\x6d\xfe\x50\x7a\x14\x85\x2a\xd5\x52\x51\x6a\xb4\xe7\x94\xef\xea" +
	"\x50\xed\xd1\x3f\x8d\x96\x1f\x0b\x7d\x7b\xf4\x18\x2f\x2a\x4e\x25\x55\x95\xb0\x79\x50\x28\xd2\x55\x4d\x8e\xfd\x33" +
	"\x49\x21\xb4\x49\xbd\x36\x68\xd9\xdc\xc1\x1a\xde\x0c\x61\x7f\x67\x59\x78\xd6\x32\x2c\x92\x2c\x51\x7e\x44\xe7\x61" +
	"\x0d\x7f\xc5\x8a\x8c\xb6\x1c\x9f\x41\xac\xa8\x45\x8e\x3f\x7c\x46\x54\x94\x63\x5a\x89\x1a\xd6\xf0\x2f\xc4\xe1\x29" +
	"\x5e\x42\x2c\x24\xeb\x16\x03\x57\x0b\xef\x75\x8b\xdd\xda\x87\x0e\x7c\xbc\xec\x7c\xe3\x0f\xf0\xdf\xa8\xc3\x52\xab" +
	"\xd2\x68\x55\xf6\x6d\xfa\x51\x71\x4f\x82\x85\x46\x93\x4f\x47\x87\x95\x9b\x14\x54\xc8\x25\x4d\xf3\x54\xa3\x13\x4c" +
	"\x6e\x52\xd0\x7f\x49\x92\xac\x67\x27\xb4\xe5\x49\xa1\x67\xd7\xc8\xe9\xb0\x42\x1b\x32\x61\xca\x42\x4d\x7b\xd4\x42" +
	"\x06\x45\x96\xa2\x73\xe4\x60\x0d\xe7\x2f\xc9\x84\x73\xe2\x2e\xdd\x96\x9a\xb1\x27\xbe\xa8\x0e\x75\x1b\x6d\xd5\xc1" +
	"\x00\xde\xb2\x13\xa3\x4d\x89\x44\xc3\x24\xab\x1c\x2e\x9a\xe2\x1d\x6e\xdf\x6a\x83\x67\x17\x4d\xf1\x1e\x45\x0e\xaf" +
	"\x5e\x2b\x02\x8f\x6c\x48\x0a\x03\x96\xfa\xc1\x62\x91\x01\x8b\xcc\x33\xd5\xeb\xef\xc0\x97\xba\xe0\xad\xce\xb9\x0c" +
	"\x0f\x54\xf0\x2e\x14\xac\x95\xa3\xa6\x06\x49\x55\x6d\x30\xec\x64\x5a\x3b\x6c\x35\x6e\x53\x69\xc8\x63\x04\x30\x64" +
	"\x9f\xf5\x83\xda\x2e\x5b\x74\x5e\x93\x85\x04\x7e\x38\xff\x16\xee\xef\x47\xaf\xd6\xeb\xee\xdd\xc9\x09\x94\xc2\xcf" +
	"\xe3\x5a\xb0\x2c\xbf\xff\xe9\xc7\x6e\xc8\x77\x46\x70\xd9\xe7\xc2\x0d\x59\x84\x57\xc1\x74\x76\x32\x24\xdd\x6a\x9b" +
	"\xd3\x36\x18\x9c\x0c\x15\x21\xd5\x0c\xeb\x4f\x10\x0f\x8a\x18\xee\xa1\x9f\xa7\x19\xd4\x5d\x89\x70\x3f\x0c\xf2\xc3" +
	"\x40\x3f\xf4\xf4\xcb\xbb\xcd\x63\x83\x8a\xa2\xae\x97\x59\xf7\x17\xde\x0e\xb3\x11\x4e\xaf\x61\x8c\x67\xb0\xc8\x84" +
	"\x55\xf0\xf3\xee\xb8\x10\x86\xd1\x59\xc1\x78\x7c\xb5\xd5\x2c\xcb\xf9\x2a\x08\x92\xf3\x33\x88\x31\xd7\xdc\xb5\xb5" +
	"\xc7\xeb\xcf\x43\xcc\x5a\x5f\x9b\xc3\xec\xae\x0e\xb1\x3b\xd8\xed\xfa\x10\x37\x16\x19\xc6\xa7\xd1\xa3\xdb\xf5\xe0" +
	"\x66\xc3\x11\xb4\xfa\x1d\x45\x8e\x2e\xc9\x73\x58\xfd\x61\x1a\x95\xcc\x15\x2d\x72\x2c\x16\x2d\x3a\xd6\x52\x98\xd3" +
	"\x7d\x60\x3b\x06\x49\x1e\x0e\x66\xcf\xc0\xcc\xd1\xd6\xa3\x9b\x2e\xd5\xf4\xa0\x83\x11\xe8\x1a\x3b\x99\x68\xd0\xf3" +
	"\x58\x1f\xae\x9f\x7d\x95\x29\x1e\x01\x92\x5a\x74\x42\xe1\x82\x49\x29\x83\xfb\x58\x3d\x42\xb5\x2d\x68\x52\xdf\xcf" +
	"\x40\xb2\x03\xcd\x08\xac\x90\x45\xb8\x44\xc2\x62\x4c\xe0\x97\x0b\x95\x84\x5b\x7d\x83\xd2\xf8\x95\x74\xc9\x9e\x45" +
	"\xc8\xdd\x4e\xbd\xd1\xee\x65\x40\x3f\x3a\xaf\xd0\xcb\x64\xb9\xba\x5c\x34\xc9\x17\x73\xe8\x67\x39\x3e\xe7\x26\xb3" +
	"\x3d\xdd\xd3\x0c\x7a\xaa\xfb\xa0\x57\x57\xbf\x6d\x92\xe7\x3f\x41\x56\x97\xef\x93\xe8\xc9\xd9\xf0\x7f\x00\x00\x00" +
	"\xff\xff\x97\xf8\xbf\x1a\xf0\x08\x00\x00")

func vim_templateLangsGoGoVimBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsGoGoVim,
		"vim_template/langs/go/go.vim",
	)
}

func vim_templateLangsGoGoVim() (*asset, error) {
	bytes, err := vim_templateLangsGoGoVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/go/go.vim", size: 2288, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsHaskellHaskellBundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x48\x2c\xce\x4e\xcd\xc9\x51\x70\x2a\xcd\x4b\xc9\x49\xe5" +
	"\x0a\xc8\x29\x4d\x57\x50\x4f\x4d\x4c\xcf\x49\x2d\xc9\x2d\xd1\xcf\x4b\x4d\xce\xd7\x4d\xcf\x48\x56\x87\x4a\xa4\x24" +
	"\xa6\xeb\x97\x65\xe6\x1a\x65\x14\xc3\x44\x0a\x92\x8a\x32\x8b\x93\x32\xf3\x40\xc2\xba\xc5\x95\x79\x25\x89\x15\xba" +
	"\xc5\x19\x89\xd9\xa9\xc5\x05\xa9\x89\x45\xa9\xea\x5c\x80\x00\x00\x00\xff\xff\x16\x11\x04\x3a\x64\x00\x00\x00")

func vim_templateLangsHaskellHaskellBundleBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsHaskellHaskellBundle,
		"vim_template/langs/haskell/haskell.bundle",
	)
}

func vim_templateLangsHaskellHaskellBundle() (*asset, error) {
	bytes, err := vim_templateLangsHaskellHaskellBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/haskell/haskell.bundle", size: 100, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsHaskellHaskellSh = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c" +
	"\xce\xe0\x02\x04\x00\x00\xff\xff\x06\xce\x4e\xf4\x14\x00\x00\x00")

func vim_templateLangsHaskellHaskellShBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsHaskellHaskellSh,
		"vim_template/langs/haskell/haskell.sh",
	)
}

func vim_templateLangsHaskellHaskellSh() (*asset, error) {
	bytes, err := vim_templateLangsHaskellHaskellShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/haskell/haskell.sh", size: 20, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsHaskellHaskellVim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x41\xaa\xc2\x50\x0c\x85\xe1\x79\x57\x11\x78\x2b\x78\x53\xa1\x53" +
	"\xb7\x11\xd2\xdc\x63\x1b\x4c\x13\xe9\x4d\x29\xee\xde\x81\x15\x74\x7a\xce\xcf\xe7\x28\x9a\x2f\x8b\xf4\x3b\xdc\x59" +
	"\x33\x14\xe2\x7c\x58\x03\x8d\xf4\x3f\xfc\xde\xeb\xee\x65\x6e\x01\xee\xb5\x59\xcc\xfd\xab\x09\x68\xce\x8b\x32\x42" +
	"\x26\x07\x37\x94\x98\xa3\xf1\xb4\xe5\xd1\xdf\x98\xec\x95\xba\x36\xba\x9a\xa3\x9e\x0f\xd0\xe9\x52\x47\x79\xaa\x38" +
	"\xe5\x1a\x76\xdb\x43\xc7\x53\xfb\xfb\x0c\xc3\x2b\x00\x00\xff\xff\x37\x29\x51\xc7\xa8\x00\x00\x00")

func vim_templateLangsHaskellHaskellVimBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsHaskellHaskellVim,
		"vim_template/langs/haskell/haskell.vim",
	)
}

func vim_templateLangsHaskellHaskellVim() (*asset, error) {
	bytes, err := vim_templateLangsHaskellHaskellVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/haskell/haskell.vim", size: 168, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsHtmlHtmlBundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x08\xf1\xf5\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29" +
	"\x4d\x57\x50\xcf\x48\xcc\xcc\x31\x2a\xd5\x2f\xcb\xcc\xd5\x4d\x2e\x2e\x36\xd6\x2d\xae\xcc\x2b\x49\xac\x50\x87\xca" +
	"\xa6\xe7\x17\xe5\xa7\x64\xe6\x15\x67\x67\x56\x42\x94\xe4\xe7\xe4\x17\xa5\x16\x17\x96\xa6\xc2\x54\x94\x14\xe4\x17" +
	"\xa4\x82\xe5\x32\x12\x73\x73\x60\xa2\xb9\x89\x25\x25\x79\xfa\xa9\xb9\xb9\xa9\x25\xba\x65\x99\xb9\xea\x5c\x80\x00" +
	"\x00\x00\xff\xff\xca\xeb\xef\x16\x7c\x00\x00\x00")

func vim_templateLangsHtmlHtmlBundleBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsHtmlHtmlBundle,
		"vim_template/langs/html/html.bundle",
	)
}

func vim_templateLangsHtmlHtmlBundle() (*asset, error) {
	bytes, err := vim_templateLangsHtmlHtmlBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/html/html.bundle", size: 124, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsHtmlHtmlVim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xca\x31\x0e\x84\x20\x10\x05\xd0\x9e\x53\xfc\x6c\xbd\x15\x3d\xad\xf7" +
	"\x18\x61\x88\x24\x83\x10\xe7\x1b\xf5\xf6\x16\xf6\xef\x87\x3a\x0e\x6c\xec\x86\xda\x4c\xfd\x8f\x08\x9f\x92\xd5\x83" +
	"\x9c\x1c\xb9\x17\x2c\xcd\x94\xcf\xd4\x4f\xb9\xd2\x46\x16\x03\x3d\x45\xf8\x95\x22\xf4\x9e\xb2\x17\xca\x1a\xde\x00" +
	"\x00\x00\xff\xff\x79\xb0\x6e\xfa\x4e\x00\x00\x00")

func vim_templateLangsHtmlHtmlVimBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsHtmlHtmlVim,
		"vim_template/langs/html/html.vim",
	)
}

func vim_templateLangsHtmlHtmlVim() (*asset, error) {
	bytes, err := vim_templateLangsHtmlHtmlVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/html/html.vim", size: 78, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsJavascriptJavascriptBundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x4a\x2c\x4b\x2c\x4e\x2e\xca\x2c\x28\x51\x70\x2a\xcd\x4b" +
	"\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\xcf\x4a\xcd\x49\x2d\x4a\xd4\x2f\xcb\xcc\xd5\xcd\x82\x2b\xd1\x2d\xae\xcc\x2b" +
	"\x49\xac\x50\xe7\x02\x04\x00\x00\xff\xff\x00\x2b\xe6\xb7\x39\x00\x00\x00")

func vim_templateLangsJavascriptJavascriptBundleBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsJavascriptJavascriptBundle,
		"vim_template/langs/javascript/javascript.bundle",
	)
}

func vim_templateLangsJavascriptJavascriptBundle() (*asset, error) {
	bytes, err := vim_templateLangsJavascriptJavascriptBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/javascript/javascript.bundle", size: 57, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsJavascriptJavascriptVim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\x31\x0b\xc2\x30\x10\x85\xf7\xfc\x8a\xd3\xdd\x41\x70\x12\xba\xa9" +
	"\xa3\x93\x7b\xb9\x24\xd7\x26\x92\x34\x21\x77\xa9\x0a\xfe\x78\x29\x48\xd3\xed\xbd\xef\x7d\xf0\x02\x09\x8c\xe7\x27" +
	"\xce\xc8\xa6\xf8\x2c\x3d\x4d\xa8\x03\xf5\x36\x45\x27\x31\x18\x66\xe8\xe0\xa8\xd4\x1e\x66\x1f\x0f\xcd\x53\x58\xc7" +
	"\x92\x6a\x5e\x70\x31\xdb\x01\x00\xab\x24\x13\xed\xae\x45\xb8\xf9\x40\x8f\x4f\x26\x68\x22\x30\x09\x08\x6a\x96\x94" +
	"\xbb\xd3\x77\x69\xec\xfc\x20\x2f\x6f\xc5\xfd\x01\xbd\x33\x4e\x56\x50\x03\xa7\x41\x56\x79\x3d\xbf\xde\x2f\xea\x17" +
	"\x00\x00\xff\xff\x19\x8f\xca\x24\xc2\x00\x00\x00")

func vim_templateLangsJavascriptJavascriptVimBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsJavascriptJavascriptVim,
		"vim_template/langs/javascript/javascript.vim",
	)
}

func vim_templateLangsJavascriptJavascriptVim() (*asset, error) {
	bytes, err := vim_templateLangsJavascriptJavascriptVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/javascript/javascript.vim", size: 194, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsLispLispBundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\xc9\x2c\x2e\x50\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29" +
	"\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x4e\x2e\xca\x2c\x28\x29\xd6\x2f\xce\xc9\xcc\x2d\xd3\x2b\xcb\xcc\x55\xe7\x02\x04" +
	"\x00\x00\xff\xff\xdc\x2f\xf4\x93\x2c\x00\x00\x00")

func vim_templateLangsLispLispBundleBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsLispLispBundle,
		"vim_template/langs/lisp/lisp.bundle",
	)
}

func vim_templateLangsLispLispBundle() (*asset, error) {
	bytes, err := vim_templateLangsLispLispBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/lisp/lisp.bundle", size: 44, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsLispLispVim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func vim_templateLangsLispLispVimBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsLispLispVim,
		"vim_template/langs/lisp/lisp.vim",
	)
}

func vim_templateLangsLispLispVim() (*asset, error) {
	bytes, err := vim_templateLangsLispLispVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/lisp/lisp.vim", size: 0, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsLuaLuaBundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x29\x4d\x54\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d" +
	"\x57\x50\xaf\xc8\xcf\xc9\xaf\xd0\x2f\xcb\xcc\xd5\xcd\x29\x4d\xd4\x4d\x2b\x29\xc8\x29\x4d\xcf\xcc\x53\xc7\x2a\x9b" +
	"\x99\x57\x5c\x90\x9a\x5c\xa2\xce\x05\x08\x00\x00\xff\xff\x3e\xb2\x39\x4e\x49\x00\x00\x00")

func vim_templateLangsLuaLuaBundleBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsLuaLuaBundle,
		"vim_template/langs/lua/lua.bundle",
	)
}

func vim_templateLangsLuaLuaBundle() (*asset, error) {
	bytes, err := vim_templateLangsLuaLuaBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/lua/lua.bundle", size: 73, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsLuaLuaVim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func vim_templateLangsLuaLuaVimBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsLuaLuaVim,
		"vim_template/langs/lua/lua.vim",
	)
}

func vim_templateLangsLuaLuaVim() (*asset, error) {
	bytes, err := vim_templateLangsLuaLuaVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/lua/lua.vim", size: 0, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsOcamlOcamlBundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x77\x4e\xcc\xcd\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8" +
	"\x29\x4d\x57\x50\x4f\x49\x4d\xd3\xcd\xc9\x4e\xd2\xcf\x4f\x2e\xd0\xcd\xcc\x4b\x49\xcd\x2b\xd1\x2d\xcb\xcc\x55\xe7" +
	"\x02\x04\x00\x00\xff\xff\x09\x6f\x0a\x9c\x2e\x00\x00\x00")

func vim_templateLangsOcamlOcamlBundleBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsOcamlOcamlBundle,
		"vim_template/langs/ocaml/ocaml.bundle",
	)
}

func vim_templateLangsOcamlOcamlBundle() (*asset, error) {
	bytes, err := vim_templateLangsOcamlOcamlBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/ocaml/ocaml.bundle", size: 46, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsOcamlOcamlVim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x3f\x4b\xc4\x40\x10\x47\xfb\xfd\x14\x3f\x16\x61\xee\xf0\xb8\xeb" +
	"\x85\x14\x62\x2d\x16\x57\xaa\x1c\xeb\xde\x24\x59\xdc\x3f\x61\x67\x12\xcc\xb7\x97\xc4\xa4\x10\xa6\x9b\xc7\xfb\x3d" +
	"\x8b\xe7\xfb\x1d\xaf\x5c\x63\xc8\xd0\x82\xaa\x83\x89\xac\xe8\x9e\xca\xe0\x92\xf4\xae\x32\x1a\xc8\xf8\x25\x1a\x74" +
	"\x54\x3e\xc8\x2c\xca\xe9\x40\xcb\x1b\xbe\xe4\x36\x74\x98\x5c\xc5\x8a\xd2\xf1\x44\x1f\xf9\x81\x4e\xb4\x1c\xd1\xd1" +
	"\xf0\x0f\xfb\x51\x19\x56\x58\x17\xf9\x63\x63\x71\xfe\x67\x3f\xc3\x5e\xd2\xba\x7f\x99\x42\xb2\xc6\x58\x5c\x59\xf7" +
	"\x24\x27\xb8\xce\x59\x9d\x68\xf0\xf0\x3d\xfb\x6f\xae\x68\x4b\xc5\xdb\x8b\x4b\x71\x4b\x95\x9d\xb8\x15\xef\x52\xbc" +
	"\x6d\x9c\xa0\xc1\x3b\xfd\xb9\xe9\xd3\xfc\x06\x00\x00\xff\xff\xda\xe9\x56\xf5\xeb\x00\x00\x00")

func vim_templateLangsOcamlOcamlVimBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsOcamlOcamlVim,
		"vim_template/langs/ocaml/ocaml.vim",
	)
}

func vim_templateLangsOcamlOcamlVim() (*asset, error) {
	bytes, err := vim_templateLangsOcamlOcamlVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/ocaml/ocaml.vim", size: 235, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsPerlPerlBundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\x48\x2d\xca\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29" +
	"\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x48\x2d\xca\xd1\x87\x31\xd4\xa1\x12\xc9\x96\xc5\xfa\x20\x7e\x7e\x6e\x5e\xa6\x5e" +
	"\x59\x66\xae\x3a\x17\x20\x00\x00\xff\xff\xf2\x47\xca\xba\x40\x00\x00\x00")

func vim_templateLangsPerlPerlBundleBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsPerlPerlBundle,
		"vim_template/langs/perl/perl.bundle",
	)
}

func vim_templateLangsPerlPerlBundle() (*asset, error) {
	bytes, err := vim_templateLangsPerlPerlBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/perl/perl.bundle", size: 64, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsPerlPerlVim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func vim_templateLangsPerlPerlVimBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsPerlPerlVim,
		"vim_template/langs/perl/perl.vim",
	)
}

func vim_templateLangsPerlPerlVim() (*asset, error) {
	bytes, err := vim_templateLangsPerlPerlVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/perl/perl.vim", size: 0, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsPhpPhpBundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\xf0\x08\x50\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d" +
	"\x57\x50\x4f\x2c\xca\x4b\x2c\x4d\xd1\xcd\x49\xd2\x2f\xcb\xcc\xd5\x2d\xc8\x28\xd0\xcd\x4b\xcc\x4d\x2d\x2e\x48\x4c" +
	"\x4e\x55\xe7\x02\x04\x00\x00\xff\xff\x15\xa4\x07\x77\x31\x00\x00\x00")

func vim_templateLangsPhpPhpBundleBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsPhpPhpBundle,
		"vim_template/langs/php/php.bundle",
	)
}

func vim_templateLangsPhpPhpBundle() (*asset, error) {
	bytes, err := vim_templateLangsPhpPhpBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/php/php.bundle", size: 49, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsPhpPhpVim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func vim_templateLangsPhpPhpVimBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsPhpPhpVim,
		"vim_template/langs/php/php.vim",
	)
}

func vim_templateLangsPhpPhpVim() (*asset, error) {
	bytes, err := vim_templateLangsPhpPhpVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/php/php.vim", size: 0, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsPythonPythonBundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\xa8\x2c\xc9\xc8\xcf\x53\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a" +
	"\xc8\x29\x4d\x57\x50\x4f\x49\x2c\xcb\x4c\xc9\x48\xcc\x29\x49\x2d\xd2\xcf\x4a\x4d\xc9\xd4\x2d\xcb\xcc\x55\x87\xca" +
	"\x15\x25\x66\xe6\xe6\xe7\x99\x58\xea\x17\xa5\x16\x96\x66\x16\xa5\xe6\xa6\xe6\x95\x14\xeb\x95\x54\x94\xe8\x81\x14" +
	"\xe9\x28\x54\xab\xa7\xe5\x17\xa9\x5b\x29\xa8\x23\xcb\xab\xd7\x72\x01\x02\x00\x00\xff\xff\x43\x5d\xe1\x70\x6b\x00" +
	"\x00\x00")

func vim_templateLangsPythonPythonBundleBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsPythonPythonBundle,
		"vim_template/langs/python/python.bundle",
	)
}

func vim_templateLangsPythonPythonBundle() (*asset, error) {
	bytes, err := vim_templateLangsPythonPythonBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/python/python.bundle", size: 107, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsPythonPythonVim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x4f\x6f\xdb\x30\x0c\xc5\xef\xfe\x14\x5c\x72\xc8\x61\x2e\xd0\x01" +
	"\x05\xd6\x0d\x73\x2f\xeb\x76\x19\xb0\x4b\x77\xdb\x0a\x83\x91\x68\x9b\x2b\x2d\x6a\x12\x9d\x3f\xdf\x7e\x50\x9a\xa4" +
	"\x35\x1a\x1f\x0c\x93\xfe\xbd\x27\x3e\x81\x0b\xd8\xf0\x78\x15\xf7\x36\x68\xa8\x70\xea\x93\x4e\xb1\xb4\x92\x3b\x35" +
	"\x01\x70\x32\x75\xa3\x7f\xf7\xf2\x09\xdf\x59\xe8\xd7\x3e\x12\x3c\x43\x90\xc9\x44\x1d\x0a\xd0\x2e\x62\xf0\x86\x6b" +
	"\xc8\x03\x77\xb6\x65\x6f\x43\x73\x03\x86\xeb\x6c\x1a\x9b\x5b\x70\x2a\x9a\x9c\xca\x34\x86\xe6\xe3\xa7\x0a\x0e\xcf" +
	"\x1f\xe8\x34\x8d\x68\x1a\x8d\x35\xe4\xf7\x8d\x4b\xfa\x0f\xb2\x76\x76\x12\xde\x9c\x49\xc7\x61\xab\xc9\xe7\x86\xbb" +
	"\x9a\xe4\xf0\xca\x54\x77\x9a\xea\xed\xc0\x42\xb5\xa5\x7d\x4d\x3b\x47\xd1\xea\x8e\x03\x8a\xec\x6b\x4f\x5d\xed\x04" +
	"\x73\xae\xb7\x6c\xc3\x39\xe6\xb7\x9f\xf7\x55\xb5\x80\xbf\xe4\xf9\x6a\xc3\x63\x25\x64\xd0\x7f\x2e\xe5\x32\x6a\x9c" +
	"\x62\xab\xa1\xf5\x6a\xd0\xc0\xf5\xeb\x7f\xbd\x9a\xb6\x98\x33\xf7\x61\xa4\x60\xb9\x75\x3a\x8e\x18\x3c\x34\xb0\xf8" +
	"\x22\x84\x9e\xd2\x5d\xbf\x78\xa3\xf0\xd4\x71\xe0\x43\xbe\x4b\x0a\x3f\x53\x78\x75\x53\x31\xc7\xc2\xbf\xc6\x7f\xcc" +
	"\xb0\x29\x63\x4f\x17\xed\xc2\x8c\x4b\x14\x70\xa4\x4b\x5c\x9a\x71\x79\xd0\x6d\xeb\x50\xa4\x2d\xe9\xd0\xa6\x44\xb9" +
	"\xd0\xd7\x33\xca\xe9\x18\x85\xde\x26\xf9\x7a\xf5\x10\xd1\xd1\xdd\xdc\x72\xc4\x64\x6d\xd9\x9b\x76\xc4\x18\x39\xf4" +
	"\xf9\x70\xa1\xd5\x02\xf2\x3e\x18\x66\x63\x77\xe4\xcf\x75\xfb\xbc\x55\xad\x1b\xc8\x3d\x51\xca\xcd\xef\xd5\x73\x67" +
	"\x55\xc3\xaa\x13\x7c\xa2\xdb\xd5\x63\x71\x28\xbb\x8b\x9c\x84\x03\x1d\x3d\x8e\xd5\x92\x76\x46\x21\x97\x11\x97\x1b" +
	"\x4e\x36\xa1\x50\xd8\x2c\x29\xe0\x5a\xa8\x4c\xfb\xa1\xc8\x1f\xca\x81\x3b\x18\xb8\x1f\x84\xfb\xc1\xaa\x05\xdc\x53" +
	"\x87\x93\xd8\x4b\x0f\x38\xc3\x9a\xcc\x28\x81\x0d\x18\x20\xaa\xec\x7b\x51\x3b\x9e\x77\x2a\x5b\xcf\xf9\xe4\x7d\x9e" +
	"\xf6\xf1\x00\x1d\xc3\x9c\x1d\x5b\x14\x39\x4c\xf0\x3f\x00\x00\xff\xff\x84\x3b\x17\x05\x7c\x03\x00\x00")

func vim_templateLangsPythonPythonVimBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsPythonPythonVim,
		"vim_template/langs/python/python.vim",
	)
}

func vim_templateLangsPythonPythonVim() (*asset, error) {
	bytes, err := vim_templateLangsPythonPythonVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/python/python.vim", size: 892, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsRubyRubyBundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcb\x31\x0e\xc3\x20\x0c\x40\xd1\x9d\x53\x74\x63\x42\xbd\x4a\xaf\x00" +
	"\x96\x0b\x6e\x01\x5b\xc6\x44\xca\xed\x33\xa0\x64\x61\x7d\x5f\xff\x53\x67\x7e\x79\x13\x16\x7c\x1f\xd4\x82\x46\xaa" +
	"\xc3\xbb\x9d\xff\xb8\xab\x28\xff\x10\x8c\xb8\xd3\xb0\x27\x17\x9e\xb9\x58\x62\x5b\xe7\x10\x84\xbb\x21\x70\x4b\x71" +
	"\xf9\x4c\x67\x50\xfc\x46\x30\x56\xea\xd9\xbb\x2b\x00\x00\xff\xff\x79\x29\xdf\x27\x8b\x00\x00\x00")

func vim_templateLangsRubyRubyBundleBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsRubyRubyBundle,
		"vim_template/langs/ruby/ruby.bundle",
	)
}

func vim_templateLangsRubyRubyBundle() (*asset, error) {
	bytes, err := vim_templateLangsRubyRubyBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/ruby/ruby.bundle", size: 139, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsRubyRubyVim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd3\xdf\x4e\x1b\x3b\x10\x06\xf0\x7b\x3f\xc5\xc0\x4d\x00\xe5\x70\x74" +
	"\xce\xe5\x8a\x20\x41\x0a\x12\x12\x45\x68\x8b\x7a\x53\xaa\x68\xd6\x9e\xdd\x58\xf8\x9f\xc6\xb3\x81\xa8\xed\xbb\x57" +
	"\x5e\x52\x92\x40\xa2\xde\x44\xc9\xe7\x9f\xbf\x8c\x9d\xac\x23\x81\xae\xe2\xbe\x59\xea\xe8\x93\x23\xa1\x59\xd3\xb7" +
	"\x2d\xf1\xcc\x45\x34\x36\x74\x30\x81\xff\xd4\x0e\xa5\x1d\xe6\x4c\x79\x66\xc3\xac\x73\xb1\x41\xb7\x0f\x32\x5a\x97" +
	"\x87\x45\x85\x7d\xc7\xb1\x4f\xb0\xb0\x9e\xf5\x3f\x45\x29\x00\xec\x25\x6a\x6f\x0e\xd6\x6f\xe1\xb2\x6f\xef\xe8\xf9" +
	"\xda\x3a\x1a\x5f\xf6\x6d\x4d\x68\xe0\xe4\x94\x9b\x71\x79\x79\x1e\x9f\x9c\x76\xe4\x73\x22\x0d\x99\xc4\x45\x8d\x0e" +
	"\x5a\xeb\x48\x96\x89\x26\xdb\x9d\x50\x2a\x1e\x96\x89\xa0\xe4\x85\x83\x60\x93\x25\xa6\xc9\xff\x3f\xcb\xa7\x3c\xb7" +
	"\xad\x3c\x5b\x23\xf3\x55\x40\x2f\x09\x83\x11\x6c\x20\xc7\x56\xde\xf0\xdb\xe4\x57\x77\x9f\xd4\xea\x90\x82\x5d\x83" +
	"\x3c\x2b\x5f\x3b\x1b\xea\x27\xf0\x43\x01\x00\x3c\xc2\xe8\xc9\x06\x93\x47\x50\xc1\xb7\x21\x59\xa5\xbe\xf2\xd1\xf4" +
	"\x8e\xf2\x68\xbc\x19\xeb\x6a\x75\x97\xdb\xb1\xa9\x0c\x65\xcd\xb6\x79\xbf\x30\xad\x74\x0c\x42\x2f\xf2\x2e\x6f\x2b" +
	"\x4f\x32\x8f\xe6\x5d\x7c\x5d\x65\x1b\x3a\x47\x12\x03\xfc\x01\xab\x39\xbf\xab\x47\xf8\xa5\xd4\x21\xd4\x5f\x12\xe9" +
	"\xd3\x85\xf5\xe0\x31\x25\x1b\xba\xac\x3c\x26\x38\xbb\x25\x34\xc4\xe7\x02\x95\x46\xe7\xa0\xee\xc3\xb4\x67\xa6\x20" +
	"\xc5\x97\xcb\x3d\x3a\x3e\x9b\xd6\xe7\x5b\x38\xaf\xf1\x1d\x21\x53\x1e\xf0\x0e\xe8\xd6\xf0\x16\xf7\x2a\x5c\xab\x0b" +
	"\xe7\x0a\xca\x2b\xa5\x0e\xe1\x3a\xf2\xeb\x4f\xcb\xd4\xa2\x96\xc8\x4b\x65\x5b\x98\x63\x3e\x1a\x85\x85\xf5\xa3\x63" +
	"\x05\xc0\x7d\x10\xeb\xe9\x00\x3c\x6a\x8e\xf9\x5f\x8f\xa2\xe7\x56\xca\x69\x15\xb9\x4c\x0a\x20\xa1\x7e\x42\x63\x0a" +
	"\x19\xd6\x14\x05\x63\xdb\xe1\x62\xb6\xcb\x43\x88\x4c\xc3\x74\xee\x75\x3a\xc6\x04\x50\xd5\x17\xc6\xdc\x23\xa3\x27" +
	"\x21\x3e\xd3\x7c\xbe\x03\xea\xa4\xa1\xaa\xa7\x31\x2c\x88\xe5\x3e\x66\x99\xc6\x60\xac\xd8\x18\xd0\xed\xd9\x42\xae" +
	"\x74\x5f\xbd\x08\xa3\x96\x5b\x92\x81\x2d\x3e\x32\xbd\xc1\xa6\x31\x64\xc1\xb0\xd7\xba\xc5\x46\x65\x79\x76\xbe\x22" +
	"\x5b\x6c\x1c\xed\x99\xc1\x4a\x29\xbf\x09\xce\x06\x7a\x20\x9f\xf6\xf4\xf2\xd0\x5b\x53\x40\x4f\x1f\x6b\x77\x78\xbb" +
	"\xf6\x37\xc3\xc4\x9a\xfe\xb2\x85\xfc\xc6\x31\x3f\x0f\x7f\xe4\x41\xfe\x0e\x00\x00\xff\xff\x8a\x29\xee\x96\xc2\x04" +
	"\x00\x00")

func vim_templateLangsRubyRubyVimBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsRubyRubyVim,
		"vim_template/langs/ruby/ruby.vim",
	)
}

func vim_templateLangsRubyRubyVim() (*asset, error) {
	bytes, err := vim_templateLangsRubyRubyVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/ruby/ruby.vim", size: 1218, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsRustRustBundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x08\xcb\xcc\x55\x28\x4a\x4c\x4e\x2d\xe2\x0a\xc8\x29\x4d\x57\x50" +
	"\x07\xb3\x75\x8b\x4a\x8b\x4b\xf4\xcb\x32\x73\x75\xc1\x5c\x75\x2e\x2e\x25\x85\xa0\xd2\xe2\x12\xbd\xb2\xcc\x5c\x98" +
	"\xba\xd2\xe2\x12\xdd\x9c\xc4\xbc\x74\xfd\x22\xa8\x84\x3a\x17\x20\x00\x00\xff\xff\x5d\xc9\x9b\x60\x4e\x00\x00\x00" +
	"")

func vim_templateLangsRustRustBundleBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsRustRustBundle,
		"vim_template/langs/rust/rust.bundle",
	)
}

func vim_templateLangsRustRustBundle() (*asset, error) {
	bytes, err := vim_templateLangsRustRustBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/rust/rust.bundle", size: 78, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsRustRustVim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x08\xcb\xcc\x55\x28\x4a\x4c\x4e\x2d\xe2\x4a\x2c\x55\x70\xcb\xcc" +
	"\x49\x0d\xa9\x2c\x48\x55\x28\x2a\x2d\x2e\x51\xc8\xcb\x4d\x2c\x50\x48\x4f\x51\xb0\x09\xc8\x29\x4d\xb7\xd3\x00\x89" +
	"\xe9\xa6\xa4\xa6\x69\xe2\x52\x59\x8c\xae\x52\xb7\xb8\x20\x27\xb3\x04\xa7\xfa\x0a\x0c\xf5\x65\xa9\x45\x25\x99\xc9" +
	"\x89\x39\xb8\xb4\xd8\xe4\xa4\x26\xa6\xa4\x16\xd9\xa1\x3b\x2a\x3f\x59\x93\x0b\x10\x00\x00\xff\xff\x3a\xba\x61\xf4" +
	"\xcb\x00\x00\x00")

func vim_templateLangsRustRustVimBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsRustRustVim,
		"vim_template/langs/rust/rust.vim",
	)
}

func vim_templateLangsRustRustVim() (*asset, error) {
	bytes, err := vim_templateLangsRustRustVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/rust/rust.vim", size: 203, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsScalaScalaBundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4c\x53\xc8\x48\x2c\xd6\x50\x2f\xa8\x2c\xc9\xc8\xcf\x53\xd7\xe4\x52" +
	"\x50\x50\x50\x50\x52\x28\x4e\x2a\xd1\x2d\xcb\xcc\x05\xf3\x02\x72\x4a\xd3\x15\xd4\xb3\x4b\xca\xf2\x53\x73\xb2\x53" +
	"\x8b\xf4\xa1\x72\xea\x5c\xa9\x79\x29\x99\x69\x5c\x4a\x0a\x65\x99\xb9\xba\xc5\xc9\x89\x39\x89\x5c\x10\xa5\x29\xa9" +
	"\x45\xa9\xd9\xe5\x95\x89\x25\x25\xfa\x70\x29\x75\x2e\x40\x00\x00\x00\xff\xff\xf5\xdc\x1e\x08\x6a\x00\x00\x00")

func vim_templateLangsScalaScalaBundleBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsScalaScalaBundle,
		"vim_template/langs/scala/scala.bundle",
	)
}

func vim_templateLangsScalaScalaBundle() (*asset, error) {
	bytes, err := vim_templateLangsScalaScalaBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/scala/scala.bundle", size: 106, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateLangsScalaScalaVim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func vim_templateLangsScalaScalaVimBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateLangsScalaScalaVim,
		"vim_template/langs/scala/scala.vim",
	)
}

func vim_templateLangsScalaScalaVim() (*asset, error) {
	bytes, err := vim_templateLangsScalaScalaVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/langs/scala/scala.vim", size: 0, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateVimrc = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x7a\xcd\x72\xdc\x48\x72\xf0\x79\xfa\x29\x92\x90\x38\x20\x39\x8d\x6e" +
	"\x49\xfb\x33\xdf\xd7\x41\x74\xc4\x88\x12\xb5\x5a\x93\x92\x96\xe4\xcc\xce\xec\xd2\x86\x0b\x40\x01\x28\xb1\x50\x05" +
	"\x55\x15\xfa\x47\x1c\x4e\xd8\x7b\xf0\x3a\xf6\xb0\xe1\xc3\x86\xd7\xe1\x70\x4c\xac\x1d\xde\x93\x2f\xfe\x0b\x5f\x7c" +
	"\xb3\xef\xf6\x3b\xe8\x01\xf6\x19\x1c\x59\x05\xa0\xbb\xc9\x6e\x49\x61\x8b\x3e\x98\x87\x26\x90\x99\x95\x99\x95\x55" +
	"\x95\x7f\x05\x0f\x26\xac\x0c\x62\x29\x8d\x36\x8a\x54\x70\x79\x39\xf8\x82\x2a\xcd\xa4\xb8\xba\xea\xf5\xbc\xbd\x0f" +
	"\xf9\xd7\xf3\x3c\xf8\x82\x95\xc1\x8b\xa3\x3a\x87\x44\x2a\xfa\xa1\xf9\xb3\x0c\x0a\xa2\x77\xfc\x09\x2b\x23\x6d\x88" +
	"\x32\x4c\xe4\xfe\x6e\x0f\x40\x53\x03\x42\x26\xb2\xac\x88\x61\x31\xa7\xb0\xfa\xe7\xc1\x43\x0a\xec\xb8\x52\x72\x42" +
	"\xd3\x1e\x15\x29\xcb\x7a\x3d\x4e\x0d\xda\xa6\xe2\x75\x1e\xd1\x19\xd3\x46\x87\x74\x56\x11\x91\xee\xf8\x97\x97\x83" +
	"\x03\x29\x32\x96\x0f\x1e\x12\x4d\x1f\x31\x75\x75\x35\x24\xb5\x91\x5c\x92\x74\x88\x03\x06\x13\x56\xfa\xbb\x8e\x47" +
	"\x3e\x42\x75\x3a\x0b\x47\x9c\x88\x5c\x43\x08\xde\xe5\x25\x28\x22\x72\x0a\x77\x2f\xe8\xbc\x0f\x77\x27\x84\xd7\x14" +
	"\x46\x21\x0c\x8e\x88\xc8\x6b\x92\xd3\xab\xab\xcb\x4b\x96\x59\xfc\xd5\x55\xff\xf2\x92\x8a\x14\x41\x8e\x12\x9f\x2c" +
	"\xc0\x5b\x2b\x86\xa6\xcc\x48\xe5\xe4\x0c\x1e\xdb\x97\xab\x2b\xef\xa3\x8f\x3e\xfa\xc8\x03\x31\x61\x25\x48\x85\xd3" +
	"\xeb\xa1\xd1\xb6\x32\xc6\xa9\xa2\x24\x25\x31\xa7\x3b\xab\x93\x46\xf3\x21\x09\x9d\xd1\xa4\x36\x96\xc0\x4b\x6a\xc5" +
	"\x3d\x44\x00\xd0\xa4\x90\x54\x29\xf0\xbe\x92\x35\x14\x64\x42\xc1\x48\x60\x42\x1b\xc2\x39\x20\x1d\xca\xc9\x98\xd2" +
	"\xa6\x83\xe2\x86\x43\x01\x30\x97\xb5\xd2\x94\x67\x5b\x9e\x63\x65\x25\x50\xf0\x5e\x59\x80\x5b\x06\x27\x01\xbc\xa7" +
	"\x6e\x30\x13\xb9\xdb\x42\x68\xe4\xc1\xc0\xeb\xf0\xf8\xa4\x19\xa7\xc2\xc0\xd6\xb9\x95\x1b\x64\x47\x12\xde\x6b\xa5" +
	"\x20\x08\x12\x45\x89\xa1\x41\xca\x94\x86\xc2\x98\x4a\x8f\x86\x43\x45\xa6\x83\x9c\x99\xa2\x8e\x6b\x4d\x55\x22\x85" +
	"\xa1\xc2\x0c\x12\x59\x0e\x5f\xd6\x82\xe6\xb5\x10\xc3\x76\x2a\xc3\x92\x68\x43\x55\xc7\xb1\x07\xe0\xd6\x44\x48\x13" +
	"\x65\x4c\x30\x5d\x44\x8d\x59\x71\x45\xe6\x54\x7b\xbd\x1e\x00\x6a\x92\x94\x29\xce\xe8\xb1\x30\x54\xc1\x1e\xe0\xc4" +
	"\x9a\xb9\xb6\x1b\xd1\x83\x13\xfa\xaa\x66\x8a\xa6\xa3\x5e\x82\x06\x44\x36\x77\x62\x9a\x33\xb1\xf3\xb6\x1d\x89\x64" +
	"\x39\x4d\xfd\xdd\xdd\xdb\x38\xc8\xa8\x68\xb7\xa4\x15\x49\x2e\x48\x4e\xf5\x87\x96\x63\x85\xf8\x3a\x51\x52\x72\x29" +
	"\x35\x1d\x0a\xaa\x52\xa3\x28\xf5\x1b\xd4\x4b\xa6\x8d\xb2\xcb\xd0\x62\x02\x43\x62\xdd\xa2\x4d\x25\x2b\x6a\xd1\x89" +
	"\x2c\x4b\x2a\x0c\x51\xf3\x9b\xb8\xac\xce\x99\x61\x93\x8e\x29\xc2\x08\x53\x9c\x09\x87\x6f\x9e\xdf\x81\x0e\x4c\x41" +
	"\x4b\xda\x89\x26\x4c\xc5\x9c\xa4\x8e\x24\x67\x26\xaf\x8d\xa1\x6a\x99\x87\x4e\x14\xab\x8c\x1e\xe6\x8a\x56\xd6\x61" +
	"\xac\xc1\x1d\x9c\x7e\x56\x55\x4a\xce\x5a\x5c\xac\xa4\xd0\xd2\x6d\x3c\xa3\x08\xc3\x03\x11\x4c\x0b\x66\xa8\xae\x48" +
	"\xd2\xa9\x78\x42\x58\x29\x45\xca\x86\x29\xe5\xac\x64\xe6\x98\x98\x0e\x57\x92\x97\xb5\xd1\xb5\x2e\xd8\xd0\x90\x3c" +
	"\x26\x9d\x4e\x4b\x66\xd6\x73\x61\x88\x36\x2c\x69\x71\x5f\xe5\x79\xaa\xa4\x34\x43\x26\x52\x2a\xcc\xd1\x92\x39\xc8" +
	"\x84\x72\x26\xe4\x70\x25\x8e\x04\x75\x95\x92\xa5\xf9\xea\x82\x52\x55\x37\x07\x46\xf2\x79\xce\xa5\xf1\xd1\xf5\x30" +
	"\x9d\x32\x45\x13\x23\xd5\x7c\xc7\x1f\xd6\x5a\x0d\xb9\x4c\x08\x1f\xca\xca\x0c\xb3\xd7\x99\xf5\xde\x8e\xc5\x1a\x24" +
	"\x7c\xdd\xe0\xba\x03\x99\xbd\xce\x9c\x29\x29\xd7\xb4\x1b\xba\x8c\xf6\xfb\x70\x09\x7e\xca\x94\x3f\x02\xff\x9b\xe1" +
	"\xc0\x81\xfc\x54\xe2\xfb\x60\xd8\xee\xe8\x20\x88\x99\xf0\xe1\x6a\x2d\x8f\x46\x84\x3d\x9e\xee\x9c\x97\xe4\x82\x42" +
	"\x08\x7e\x8e\x0f\x76\x62\xce\x7b\xee\xf8\x16\xe0\x7c\x25\xfe\xad\x92\x3b\x6a\xc7\xc8\x89\x39\x2d\x64\x9d\x5b\x63" +
	"\x56\x4a\x26\x56\x50\x1f\x2e\x9d\x7a\x6e\x1c\x86\x65\x17\x47\x4f\xa9\xc6\x40\xdd\x8c\x9c\x49\x2e\x67\xd6\xc0\x25" +
	"\xd3\xdd\xc2\x2d\xa0\xda\x51\xfb\xd6\xe3\x4f\x46\x13\x17\xe5\x61\x1c\xc2\xa7\xf7\xbe\xd3\x4d\x73\x21\x5f\x17\x94" +
	"\xf3\xe5\x99\xae\x19\xf7\xdd\x1e\x80\xe7\xc1\xa9\x60\x55\x45\x8d\x5e\x70\x61\xea\x0b\xaa\x86\x35\x37\x4c\x0b\x56" +
	"\xe9\x8e\x85\x43\x17\x52\xbc\x26\x4e\xa9\x66\xa4\x6f\x27\x75\x20\xb9\x54\xed\xf1\x94\x25\xd1\x6a\x58\x4a\x2e\x2f" +
	"\x08\xf3\x6f\xc3\x85\x1d\xd4\xda\xc8\x12\xe2\x5a\xa4\xfc\xc3\xfb\xae\xcd\xe1\xfd\x61\x9d\x65\x54\x3d\xb4\x62\xaf" +
	"\xae\x7a\x1e\x5c\x5e\x5a\x22\xb8\xba\xea\x2d\xa2\x7b\xaf\x09\xef\x1f\x7c\xe2\x1f\x96\x1d\x1a\xf2\xa9\x48\x78\x9d" +
	"\x52\xc0\x38\xe9\x6b\xa0\x33\xa3\x48\x63\x56\xdc\x34\x2b\xd9\x45\x13\xb1\xbc\x45\xc4\x3a\xc2\x33\xdd\x5a\xc3\xdb" +
	"\xb5\xf9\x9a\xac\x55\x42\x61\x03\x4d\xbb\x99\x16\xc1\x90\x8a\x74\x67\x77\x35\x52\xa2\x50\x33\xaf\xa8\x25\x60\x02" +
	"\x9c\xe3\x02\x29\x7a\xb7\xb1\x95\x1e\x12\xcd\x12\x38\xa5\xa6\xae\x3e\x30\x77\x0f\xd9\x3f\x16\x89\x4c\x99\xc8\x7b" +
	"\x98\xc8\xd2\xe6\x25\xac\x4d\x16\xfc\x3f\x0b\xc2\xc9\xbe\x03\xac\x97\xe0\xb1\x2c\x63\xf7\xc0\x04\x51\xf3\x9e\xcd" +
	"\x32\x05\x85\x26\x4f\x04\x0f\x13\x44\xef\xea\x0a\x49\x8c\x99\x67\x44\x9b\x76\x33\xa2\x36\x87\x6c\x06\x31\x49\x2e" +
	"\x6c\xc8\x69\x0c\xeb\xd8\xb5\xc0\xd0\x01\xfb\x54\xf2\xbe\x4d\xc4\xed\xb8\x33\x12\xeb\x01\x1c\x93\x39\xc4\x14\xe4" +
	"\x84\x2a\xc5\x0c\x15\x10\xcf\xbb\x44\x48\xd5\x78\x10\xad\x58\x12\x6b\x23\xab\xf0\xbb\xf6\x4d\xcb\xcc\xb4\x90\x7b" +
	"\x0e\x52\xb0\xcc\x4c\x59\x6a\x8a\x86\xc4\xed\x2b\x43\x62\x2b\xea\x98\x54\xc0\x29\x49\xa9\xc2\x7c\xb4\x6f\xbd\x74" +
	"\x49\x2a\x07\x0a\xfd\xbe\xf3\x37\x8f\x05\x6e\x49\x28\x58\x9a\xa2\x1e\xf6\x58\x3a\xf1\x0e\x64\x89\x4e\x29\x51\x49" +
	"\xd1\x1a\xbf\xe0\xda\xbe\xdb\x17\x26\x92\xe5\xb7\x5c\x48\x45\x13\xa2\xa9\xd3\xb0\x24\xca\xd8\x37\xe4\xf2\xa8\x89" +
	"\x72\x8c\x6a\xc8\xa4\x02\x3d\xad\xec\xf2\x38\x71\x42\xa2\xe9\xea\xaa\x79\xd1\x53\x52\x21\xb2\xd7\xad\x62\x26\x55" +
	"\x49\x8c\x0e\x6b\xc1\x66\xfd\x54\xea\x7e\x49\x92\xde\x72\x98\xb9\x7b\xfa\x83\xc7\x47\x47\x4d\xa0\x71\x06\xa2\x9c" +
	"\x87\x0e\xdc\x46\xc3\x65\xcc\x30\x66\x62\xa8\x8b\x45\x92\xd9\xc4\x07\x28\x89\x20\x39\xc5\x64\xa9\x89\x6d\x0d\x22" +
	"\xea\x02\x75\x53\x54\xdc\x48\x38\x1b\x42\xef\xda\xb8\x36\xdf\xc6\x61\x42\xae\xc3\x6a\xac\x1b\xd6\x62\x31\x6d\x23" +
	"\x22\x8d\x08\x67\x44\x53\x2c\x9b\xee\xdf\x4e\x55\xaa\x6b\xc2\xf1\xfc\x62\xc9\xf8\xc1\x43\x81\x4d\xa7\x66\xe8\x7b" +
	"\xd0\xfe\xb8\xc9\x95\x5b\xe9\xba\x8c\xa9\x72\x65\xa2\x90\x51\xb3\x01\xa3\x92\x8a\x3a\xbc\xdf\x73\x55\x97\x5b\xde" +
	"\x75\x95\x84\x5d\xec\x04\x43\xa6\x4e\x30\xf5\x84\x26\x56\xb6\x4b\x8a\x12\x4a\x59\x6b\x5a\xca\x94\xf2\xb0\x92\x55" +
	"\xb3\xc1\x4c\x74\x20\xc3\x07\xdf\xfb\xbe\x7d\xc9\x6b\x26\x2b\xc3\xa4\xd0\x21\xcd\x4b\x65\x98\x83\x66\x22\x3c\x96" +
	"\x42\xda\xd3\x7c\x0e\xf7\xef\xf5\xda\xe2\xda\xcb\x6b\x16\xa9\x5a\x08\x26\x72\xaf\x29\x0e\x3b\x78\x49\x12\x6f\x17" +
	"\xbe\xfe\x7a\x05\x82\xbe\x64\xb1\x2f\xf3\x9a\x65\x52\x98\xf0\x98\x0a\x2e\x47\xc5\xfd\x07\x1d\xc6\x28\x22\x74\x45" +
	"\x14\x15\xc9\x3c\xfc\xb4\xab\x00\x9b\xbd\xeb\xf6\x45\x9b\x0f\x47\xb8\xa1\x68\xea\xf6\x03\x16\xf0\x4f\xbb\xbc\xb4" +
	"\xa3\x5d\xa4\xaa\x11\xb5\x07\xdd\x91\xaf\x41\x27\x52\x24\x94\xf0\xa4\x56\xda\x96\xcc\xf7\xd6\x12\x15\x04\x71\xfe" +
	"\x9b\x5f\xfd\x89\xbf\x0e\x9f\xd9\x12\xb0\xd5\x68\x93\x4b\x75\x06\xbb\x7b\xf0\xfc\xe8\xf9\xc9\xd9\xe3\x93\x63\x08" +
	"\x31\x6b\x14\xb2\xa4\x81\xa1\xaa\x64\x82\x70\x7f\x61\x11\xaa\xca\xd0\x21\x1f\x7c\xef\xfb\x76\xa9\xd1\x2c\xed\x61" +
	"\x46\x46\x1d\x8f\x19\x12\xfb\x4d\x9e\xd9\x0d\xb6\xd0\xe5\xc1\x4b\x75\x75\xf3\xbf\xf5\xec\xcd\xae\xd9\xa8\x38\xcb" +
	"\xe0\x63\xe4\x06\xe1\x37\xe0\xb7\x1c\xfd\xa6\xb9\x62\xa2\xda\x84\x0d\x8b\xe5\x50\xf1\x88\x69\xeb\x62\x4d\x41\x21" +
	"\xe6\x4c\x5c\x60\x01\xef\xec\x3c\x70\x1b\x2d\x51\x21\x19\x59\x94\x14\x8d\x6b\x4f\x94\xe4\x5c\x66\x59\xf8\x1d\xe7" +
	"\x80\x0d\x31\xb5\x86\x98\xb8\x43\xc3\x89\x36\xda\x82\xc2\x07\x16\xff\xb9\xc6\xad\x8f\x95\x8e\x68\xc3\x4a\xda\xf8" +
	"\xd5\x16\xbc\xf2\xa2\x43\xdc\xce\x56\x6b\x66\x38\x5d\x3c\x49\x9e\x86\xde\x59\xb3\x0a\xde\x02\xae\x8d\xc2\xb8\xba" +
	"\x7d\xe8\x46\x39\xe1\xc8\x29\xdc\x3e\xdc\x2e\xb7\xd5\x76\xb1\x3d\xdd\x0e\x77\xb6\x2f\x3f\xce\xb2\xab\xe1\xf6\x57" +
	"\xbb\xe7\xb0\x83\xe8\x73\xd8\xe6\xe7\xc3\xed\xa3\xfe\x39\x1e\xd3\x73\xd8\x4e\x76\xcf\xd1\xd3\xba\x88\x82\xf1\xa8" +
	"\x42\x6f\x33\x82\xb3\x82\x6a\x0a\x53\xc6\x39\xd8\xca\x80\x61\xc4\x03\x53\x10\x03\xb9\x44\x8b\x19\x69\x2d\x28\xe8" +
	"\x0c\x33\x18\x8c\xb9\x40\xac\xcb\xb6\x8c\xec\xc0\x84\xda\x0e\x82\x14\x96\xd2\xda\x82\x19\x1f\x83\x4d\x2d\x52\x60" +
	"\x62\xd0\x13\x18\x9e\x4a\x52\x81\x00\xf1\xfa\xf5\xeb\xc9\x02\xf0\x0c\x9e\x59\xc0\x52\x40\xf1\xf6\xda\xaa\xf8\xce" +
	"\x62\xbe\x5e\xdb\x4b\x5b\x80\x3e\x09\xb7\x2f\xd7\x50\xee\xec\x5e\x2d\x22\xcb\x52\x91\xdc\xb8\xf7\xe6\x2d\xb2\x25" +
	"\x33\x1e\xaa\x4a\x4e\xa9\x05\x31\x5d\xf8\xab\x44\x77\xe8\xcc\x50\x81\xd1\x40\xdf\xe9\xea\xd2\x3b\xcb\x27\x7a\x23" +
	"\x79\xac\x88\x48\x8a\xf7\xa3\x35\x24\x76\xa0\xf7\x23\xc6\xc2\x79\x33\x6d\xa4\x2f\x58\x15\xd1\xb2\x32\xf3\x48\xd3" +
	"\xc4\xba\xd7\xdb\x8a\x5d\x9f\xc5\xb1\xa2\x13\x46\xac\x90\x5b\xe0\x2f\xa4\xdb\x72\x1a\x14\x25\x9c\xcf\xa1\x20\x55" +
	"\x35\x87\x5a\x18\xc6\x61\xde\x75\xfd\x0a\xa6\x41\x17\x52\x99\xa4\x36\xba\x97\xe0\xd6\x22\x56\x33\xf8\xf1\x16\x4c" +
	"\xb7\x56\x20\x3f\xda\x82\x57\xd7\x20\x84\xf3\x2d\x78\x85\xbf\xab\x63\x5f\xc1\xf4\xd5\x2a\x84\xc0\x94\xac\x40\xa6" +
	"\x3f\xba\x41\x73\x13\x02\xd3\x55\x79\xf0\xea\x86\x7c\x2b\xde\x7a\x94\x67\x8f\x4f\x1e\x9d\x29\x4a\x21\xb1\x29\x4e" +
	"\xad\xac\x71\x9b\x25\x6e\x91\x07\xc5\x23\xa6\x8e\x65\x4a\xc3\x07\xd7\x30\x4f\x6d\x22\x18\xfe\xd4\x3f\x1f\xa8\x38" +
	"\xb9\xeb\xf7\xc1\x3f\xff\xc6\xfd\x1b\x54\xf3\x06\x30\x48\xe3\xe6\x41\xbf\xe2\xcc\x50\xfb\x12\x45\xd5\x3c\x21\x49" +
	"\x41\xa3\xc8\xff\xfd\x6b\x5c\x4f\xa5\x32\xcf\x15\xa6\xaf\x3f\xf5\xff\x20\x8a\x90\x95\x63\x30\xb4\xff\xf6\x1a\x66" +
	"\xd3\xaa\x61\x1b\x93\x8b\x4e\xf4\x0d\x5e\x85\x9c\x3e\x94\xf2\xa2\x24\xea\x42\x87\xed\xe6\x6d\x5b\x68\x11\xa6\xda" +
	"\x51\x26\x93\x5a\x47\x52\x44\x36\x4d\xed\x88\x5a\x16\xc7\xa4\x7a\x5e\x51\xf1\x54\x9c\x91\xf8\xd4\x35\x5e\x43\xf0" +
	"\xf7\x4f\x58\x5e\x98\x63\xcc\x3a\xc6\xfe\xb5\x11\x3f\x66\xe2\x94\xbd\xc6\xe3\xfe\x3d\xe7\xe8\xa7\x8c\xa7\x2e\x69" +
	"\xfe\x24\xdc\x1b\x9a\xb2\x1a\xee\xf5\xf7\x06\x5a\xe2\xcf\xb4\xea\xef\x0d\x5e\x33\xfc\xad\xe6\x49\x7f\x6f\x90\xc6" +
	"\x08\xb6\xa6\x5a\x38\xae\x7d\xd7\xf2\x1d\xc3\xfe\xe1\x83\x31\x74\x92\x0e\x99\x48\xf7\x0f\x4e\xc6\x6b\x09\xbf\xb3" +
	"\x44\x78\x26\xf3\x9c\x53\x4b\xda\xf3\xa0\x6d\xc4\xad\x1b\xe6\x2a\x87\x71\x06\xa3\x13\x24\xb3\x43\x70\x7a\x4f\x14" +
	"\xad\xa2\x47\x34\x23\x35\x37\xd1\xf3\xaa\x3d\xe9\x7e\xf0\xf4\xc4\x5f\x10\x9c\xa2\x3b\x38\x44\x3b\x22\x6e\x6f\xc0" +
	"\x65\x0e\x38\xa5\xeb\x24\x8f\x98\xb2\x14\x83\x9c\x61\x46\x98\xd2\xa8\x94\x29\xd6\x44\x7e\xe3\x47\xbb\xa6\xcc\xa2" +
	"\xe7\x6f\x41\x11\x96\xde\x51\xa5\x64\x59\xd9\x75\xc8\x04\x29\x31\xef\x63\xd9\x7c\x27\xa7\x26\x99\xa6\x3b\xbb\x7d" +
	"\xf0\x46\xdf\x78\xbb\xfe\xf5\xa1\xdd\x28\xf0\xef\x82\x15\xd4\x66\x22\x40\xcb\x9a\xbb\xbd\xcf\xb2\x8d\x37\x0c\x21" +
	"\xf8\xc2\xb6\x89\x00\x36\x1b\x4e\x17\x30\x6a\xd9\x5a\xe3\x35\x59\xcc\xdb\x47\x7c\xc1\xca\x53\xd4\xf1\xc0\xb6\xe7" +
	"\xdd\xb8\x26\xaa\x7c\x70\x3f\x77\x58\x8b\xe4\x56\x7c\xe8\x72\x1e\xbf\xa7\x47\x9a\x9a\xba\xfa\xb1\x72\xc1\xdf\xe6" +
	"\xf0\x59\x23\x19\xae\x21\x77\x16\x59\xf3\x54\x91\x6a\xf1\x52\x86\x4b\x59\x33\x9d\x35\x75\xf0\xa7\xff\xdf\x65\x75" +
	"\x2d\xbb\xdb\x33\xd5\x67\x4d\xb9\x7e\x52\xdf\x42\xdf\xcc\xf3\x30\x1f\x82\x17\x07\x18\x72\x30\xa9\x06\x2a\x64\x9d" +
	"\x17\x7d\x48\x25\x34\x95\x54\xc1\xf2\x82\xa3\xa7\x41\x40\x82\x19\x52\xa6\x64\x09\xb6\xd5\x00\xb5\xe0\x54\x6b\x78" +
	"\x70\xef\x9e\x4d\x83\x74\x8f\xd4\xb9\x92\x75\x85\xe7\x47\x25\x01\x8e\x08\x90\xdc\x35\x26\xba\x5b\x98\xad\xa5\x0b" +
	"\x99\x87\x75\xd6\x5e\xc8\x8c\x1a\x91\x38\x0c\x4a\x32\x73\x19\xe4\x83\x7b\xf7\x3a\xb6\x8f\x9f\x3d\xb2\x51\xe3\x84" +
	"\x96\x14\xeb\xb9\x26\xbf\x85\x4a\x6a\x66\xd7\x61\x55\xbe\x6a\xc8\x02\x47\x16\x74\x64\x9b\x34\x39\xa1\x24\x7d\x21" +
	"\xb5\x81\x3d\xcc\xf8\x6d\x76\xe5\xf9\xe7\x9e\xb7\x0b\x63\xb8\x0f\x1f\x7f\xbc\x02\xda\x0f\x9b\xd7\xbb\x58\x88\x01" +
	"\x9d\x51\x2c\xab\x55\x49\xf8\x16\xe4\x7f\x78\xee\x79\x08\xb4\xfb\xe2\xba\xfa\x66\x66\xae\x69\x3a\x6d\xf6\xe1\x5b" +
	"\x35\xeb\x3f\xac\xb3\x67\x74\x8a\xce\x0d\xf6\x06\x66\x66\xc0\xb6\xe5\x6e\x6e\xe5\xeb\xf2\x30\xd3\x1d\x26\xf8\x7b" +
	"\x4d\x2c\x82\x02\x87\x58\x2b\x18\x45\x9d\xcd\x2b\xea\x72\x65\x4d\x8d\xbd\x14\x00\x21\x17\x2d\xa0\x15\x2d\x1b\xed" +
	"\xfa\x8d\xc2\x70\x70\x4c\x2e\xe8\x11\x9e\x47\xab\x6e\xc7\xa0\xed\x18\x86\xab\x4a\x59\x7d\xf1\xa4\x21\x4b\x45\x49" +
	"\x7a\x1b\x27\xea\xb8\xa9\x05\x6e\xa3\x3b\x7b\x5a\x71\x66\x7a\x9d\x9f\x3d\x72\xee\xb5\x80\xd1\xfe\x41\x50\x8f\x35" +
	"\x62\x5d\xb0\xbc\x46\x31\x69\x28\x26\x0b\x12\x64\xf7\x64\x0d\xb3\x9c\xc0\xe8\xc9\x54\xb1\xc6\x47\xdf\x40\x27\x30" +
	"\x7a\x92\xc8\xb2\xdc\x20\x29\x47\x5f\xff\xa4\xaa\x75\xb1\x1e\xcd\xb9\x45\x73\xbe\x61\x34\x8c\x9e\xb8\xd2\x63\x3d" +
	"\x3e\x86\xd1\x93\x98\x93\x72\x83\x72\x29\x8c\x9e\x4c\x52\x96\x65\xeb\xd1\x0a\x46\x4f\x14\x2d\xe5\xa4\xcb\x13\xd6" +
	"\x74\xca\x16\x61\xac\x8d\x5e\x12\x46\x98\x1f\x35\x77\x34\xfb\xa7\x15\x49\xe8\x78\x0d\x9d\x86\xd1\x29\x99\xd0\x77" +
	"\xd2\xa5\x30\x7a\x44\x39\x35\x1d\xe5\x6a\x7e\xd3\x92\x25\x30\x3a\xe0\x52\xaf\x50\xb5\xbd\xd7\x25\xf2\x33\x12\x8f" +
	"\x21\x5f\xd6\xfb\x34\x70\xb0\xb3\x75\xd9\xcf\x69\x60\xc6\x30\x32\x24\x16\x74\xda\xb1\x3c\xc5\x50\x24\x95\x2d\xe9" +
	"\xbb\xde\xe0\x4d\x95\x06\x30\xe2\x49\x0a\xdb\xa3\x6a\x54\x74\x63\xd1\x34\x1a\x88\x00\x4c\x22\xa0\xe9\xf2\xc1\x94" +
	"\x99\xc2\x96\xaf\x15\x31\x05\xc8\xcc\x3e\x27\xb5\x52\x54\x18\x3e\xb7\xb4\x34\xb5\xe7\x14\x7f\xb0\xf2\x62\xe2\xc6" +
	"\x82\x51\x18\x51\xd8\x3f\x08\x4e\xc6\xed\xf7\x1a\x9e\x95\xed\xed\xc2\x00\xbc\xa1\x07\xd7\x95\x00\x43\xe2\xff\xa1" +
	"\x1e\x37\x94\x30\xd4\x9a\xeb\x3d\x15\x69\xae\x14\xbb\xa4\xb8\xc4\xaa\x82\x33\x6d\x46\x5c\x8a\x9c\x6a\xd3\xb7\x2f" +
	"\x59\xcd\xf9\xcd\xc4\x79\x80\xf9\xb2\x8c\x5f\xf6\x31\x69\xec\xef\x61\xc9\xd1\x24\xcd\x4b\xd5\x84\xcd\xf9\xee\x1e" +
	"\xfe\xe4\x30\x7a\xf4\xf8\xf0\xb3\xcf\x8f\xce\xa2\x83\xe7\xc7\xc7\x9f\x3d\x7b\x84\x69\x9f\x97\x31\x91\xc2\x1e\x04" +
	"\x76\xba\xfe\xde\xf0\x7c\xb0\xe7\x43\x50\xa9\x5a\x50\x08\x64\x0b\x5f\xce\x47\x87\x7b\xeb\x28\x0c\x51\x39\x35\xeb" +
	"\x71\x29\xd3\xd7\x31\x10\xd8\x0b\x9a\x0c\x41\x4c\x18\x4b\x6c\x21\xbc\x85\x3c\x18\xc3\x30\xa5\x93\xa1\xa8\x39\xf7" +
	"\xf0\xe8\x61\x66\x70\xca\xf8\x84\xaa\xa6\x8b\x42\x95\x6b\x5a\x74\x1f\xa7\xf8\xc4\x25\x55\x6f\x99\xb0\x4f\x72\x08" +
	"\x82\xa6\xeb\x1f\x04\xce\x92\x60\x73\xee\x20\x07\xcf\x6b\x9b\x5a\x98\xe8\x57\x2a\x0f\x49\x7e\x0e\x41\x20\xa4\x8d" +
	"\x07\xee\xd1\xb5\xd3\xba\x0e\x87\x62\x15\x12\x5f\x57\x45\xbd\x5b\x15\x85\xaa\xd8\x0a\x6b\x59\xa5\x4c\x72\x2e\xa7" +
	"\x10\x04\x39\x97\x31\x78\x5b\xa8\xdb\x70\xef\x86\x62\xca\x2a\x36\x61\xa5\x15\x0e\xed\xfe\xdd\x82\x20\x26\x22\x87" +
	"\x40\x10\x95\xeb\x70\x0f\xb0\x1e\x72\x61\x39\x7b\x9d\xdd\x99\xb0\xf2\x0e\x0e\xd8\x71\xc2\x13\xc9\xeb\x12\x85\xda" +
	"\x8f\x18\x5c\x4b\xda\xce\x31\x28\x28\x49\xf1\x70\xa3\x82\x33\x9a\x06\xae\x0f\xa6\x3b\x93\x05\x09\xd1\xf4\x3d\xd4" +
	"\x76\x42\xa4\x02\x8f\xf0\x29\x99\x6b\x0f\xfc\x81\x2d\x3d\xa8\x4e\x48\x45\x77\xf6\x5f\x05\xa8\xe8\x78\x77\xe0\x7f" +
	"\x0d\x46\x41\x90\x82\x77\x7e\xef\xfe\xa7\x9e\xdf\x87\xfb\x7d\xd8\xc7\xc9\x8c\xef\xed\x76\xd7\x7e\xdd\x61\x3b\x08" +
	"\x5e\x8c\xdf\x7d\xc2\x36\x97\x18\x31\x8c\xdc\x5d\xac\x7e\x07\x21\x85\xd1\xe1\x4f\x0e\x21\x28\xbb\x10\xd0\xde\x78" +
	"\xbb\x5a\xea\x73\x6e\xd8\xa9\x60\x95\x7e\x6c\xd5\x38\x53\x2c\xcf\xa9\x0a\xbd\x7d\x43\xe2\xb1\x77\x9d\xe8\x87\x75" +
	"\x59\x1d\x4a\x35\x25\xea\x7d\x28\x1f\x92\xe4\x62\x95\x34\x09\xd6\x90\x3e\x4e\x99\xb1\x91\x3e\xf4\x26\x54\x19\x96" +
	"\x10\x77\x62\xba\x96\x59\x7b\xb3\xd2\xbe\x47\x6e\x31\xa2\x4a\x56\x58\xe4\xd1\x88\xcb\x24\x42\x3f\xd3\x95\xfa\x0b" +
	"\x52\xaa\x94\x54\x91\x9e\x97\xb1\xe4\xa1\xff\xe6\xaf\x7e\xed\xdf\x20\x99\x12\x25\x98\xc8\x17\x44\x7f\xf9\x9b\x9b" +
	"\x44\xda\xcc\x39\x5d\xe1\x66\x3b\xea\xeb\xf8\x39\xd2\x55\xae\x96\x78\x1d\x5f\x4c\xcd\xde\xa6\x3f\xc9\x73\x45\x73" +
	"\x9c\xa4\x95\xdd\xf6\xe2\xe0\xcc\xf6\xf1\x7a\xe2\x5a\x8b\xe0\xbb\x63\x18\x39\xd4\x52\x83\xc0\xf1\x74\x9d\x3f\x2b" +
	"\xd0\x36\x48\x5a\x4e\x6d\xa3\x7b\x62\x6f\x92\x62\xda\x78\x6a\x21\xad\x40\x7c\xd7\x4b\x38\x30\xd1\x24\x0e\xbb\xef" +
	"\x15\x9b\x64\xd5\x3a\x8b\x36\x71\x7d\xf2\xf9\xd3\xb6\x04\xd1\xf6\x4b\xc4\x6b\x63\x5b\xdf\xe3\xc1\x81\xac\xe6\xc3" +
	"\x17\x44\x1b\x3a\x3c\xa8\x4d\xc7\xb4\x16\x82\x94\x34\xad\x78\xad\xbb\x6f\x20\x13\xce\xaa\x58\x12\x95\x86\x0d\xb6" +
	"\xbf\x44\xd5\xb2\x6c\x4f\xc1\x57\x5f\x81\xf7\xc9\x7c\x35\x29\x6a\xce\x43\x05\xde\x27\xf9\x8b\x15\xd4\x97\x5f\x82" +
	"\xf7\xc9\xcc\x9d\x8f\x56\x85\x92\x24\xb5\x60\x33\x2b\xde\x83\x2a\x4e\x64\x35\xb7\xb7\x9f\xcf\x4f\xbf\x04\x7c\x19" +
	"\x56\xa8\x76\x0f\x60\xd2\x9c\xe7\xd9\x18\x46\x5b\x8e\xd0\xb2\x5a\x60\x92\x31\x8c\xa6\xb0\x84\x5b\xe9\x06\x78\xe0" +
	"\x0e\x32\x08\x32\xb9\xa1\xed\x6b\x18\xc5\xd5\xda\x79\xbc\xda\x88\x99\xc1\x28\x16\x6b\x31\xd3\x0e\x63\x8d\x8f\xc9" +
	"\x56\x73\x75\x7c\x83\x34\x81\x51\x9c\x2e\x91\x52\x22\xda\x9e\xfd\x4e\x57\xc2\xee\xbe\xc5\xef\xec\xdb\xfb\xb7\x31" +
	"\x8c\x84\x2c\xf6\x13\xd5\xe4\x5d\x53\x66\xec\x85\x34\x4c\x99\x48\xe5\x54\xf7\x96\x1c\xe2\x4b\xeb\x10\xa7\xe3\x97" +
	"\xcb\xc0\x8b\x06\x78\xb1\x0c\xe4\x0d\x90\x2f\x03\x8b\x06\x58\xb8\x8f\x8c\x10\x8a\xeb\x55\x12\x26\x0c\x61\xa2\xbd" +
	"\x28\x3d\x96\x29\x05\x92\xe1\xf6\xb4\x17\xf1\xa8\xcc\x18\x30\x75\xda\xef\xb9\x05\x83\xfd\x7c\xe2\x1e\xc7\x30\xce" +
	"\x27\xee\x52\x5e\x4e\xda\x03\x02\x31\x97\xc9\x45\x6f\xd2\x8a\xfe\x21\x8c\x4a\xf0\xc7\x9f\xdc\x47\x6b\xe5\x93\x10" +
	"\x07\xb7\xb8\xdf\xb3\xb8\xfd\xe0\xc1\x02\xd7\x66\x6f\x6d\x52\xe6\xee\x3b\xa4\xc0\xe2\xe4\x07\x75\xbc\x64\xd1\x26" +
	"\x1f\x93\x30\x1a\x3c\x89\x95\x9c\xea\x36\x8b\xff\xb0\x75\xd6\xe2\x6b\x22\xd7\x32\xfe\x5f\xff\x9a\xe8\x88\x88\xfc" +
	"\xff\xe2\xb7\x44\xae\x34\x9f\xb0\xd6\xb0\xef\xfb\x3d\xd1\x49\xf2\xf6\x6f\x89\x10\x7f\x7b\x0d\xb2\x03\x29\x26\x54" +
	"\x30\x2a\x12\x0a\x13\xa2\x18\x6a\x7a\x0b\xb5\xfd\xca\xcd\xda\xea\xe7\x02\xdd\x45\x94\x0d\x9c\xba\xcb\x43\x6f\x60" +
	"\x20\x84\xcb\xab\xa5\x2f\xfc\xd6\xf0\xe8\x2e\xe7\xa2\x4c\x0a\xb3\x86\xd7\xba\x7b\x34\x4e\x33\x13\x69\x5a\x61\xcc" +
	"\x06\xff\xbd\x47\x10\xde\x8d\xfa\xfa\xc6\xa8\xa8\x63\xda\xfd\x61\x46\xf0\xe7\xff\xb2\x81\xb2\x65\xd6\x52\xfe\xdb" +
	"\xbf\xde\x24\x54\xe8\x83\x57\x78\x22\xcb\x5f\xff\xd1\x26\xca\x65\x9e\xc8\xf2\xef\xde\x3a\xb7\xe6\x06\xb2\x52\x34" +
	"\x63\xb3\x8e\xfb\xdf\xfe\xb3\x0f\xde\x9b\x6f\x7f\xd5\x87\x37\xdf\xfe\xb6\x0f\x6f\x7e\xf9\xf3\xb7\xf1\xc0\xad\x2e" +
	"\x05\x9f\xdf\x69\x92\x20\xc7\xe3\x17\x7f\xf1\x56\xc1\xf8\xee\x32\xfb\x56\x38\x2a\x7b\xd3\x50\xcb\x63\x6c\x30\x5e" +
	"\x48\x71\x82\xfe\xf3\x8f\x6f\x5a\xa2\xd9\x3a\x03\x7c\x11\xaa\x9d\xd5\x9f\xfd\x62\x33\xa5\xb3\x43\x4b\xf9\xcb\x9f" +
	"\x6f\xa6\xb4\x4a\xbc\x8f\xf0\x15\xc2\x7f\xff\xf6\x3d\x09\xdf\xfc\xe9\x6f\x37\x53\x2e\x3e\xa4\x46\xd2\xff\xf8\xd6" +
	"\x5f\xfd\xf8\xe4\x3d\x77\xfb\xef\x7e\xf6\xf7\xff\xad\xfd\xfe\xbb\x9f\xfd\x83\xef\x3e\x66\xe9\x0e\x1c\x34\x9a\x6d" +
	"\x3e\x08\x1b\xe4\x45\x6b\x99\x6f\xde\xfb\x96\xe2\x1f\xdf\xb5\xe7\x2d\xd5\x3f\xbd\x73\x95\x2d\xd9\x6f\x36\x93\xb5" +
	"\x1b\xda\x11\xfe\xcd\x3b\xf7\x97\x25\xfb\xeb\xf6\x1b\xe2\xff\x0a\x00\x00\xff\xff\x1c\x53\xff\x4d\xb2\x34\x00\x00" +
	"")

func vim_templateVimrcBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateVimrc,
		"vim_template/vimrc",
	)
}

func vim_templateVimrc() (*asset, error) {
	bytes, err := vim_templateVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/vimrc", size: 13490, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateVimrcLocalBundlesExample = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8e\x41\xce\x82\x40\x0c\x46\xf7\x73\x8a\x2f\xb3\xe1\xff\x8d\x89\x7b" +
	"\x4f\xe1\xc2\x0b\x14\xa9\xc3\xc4\x42\x49\xa7\x88\xdc\xde\x0c\x26\x26\xee\xe9\xf6\xb5\x7d\x2f\x1e\xf6\x9c\x10\x23" +
	"\x2e\x32\x27\xcc\x85\x0d\x79\x2c\x4e\x22\x98\xe8\xf6\xa0\xc4\x25\xec\x2c\x0b\x11\x57\x05\x75\x1d\xf8\xe5\x46\x5f" +
	"\x0f\x5c\xf1\xcc\xc3\x71\x43\xde\xf3\x80\x96\x45\x97\x10\xc1\x09\x7f\x77\x35\xa4\xec\xfd\xdc\xfe\x9f\xeb\x8b\xad" +
	"\xb7\xa9\xc1\x27\xe3\x49\x4b\x76\xb5\xb5\xa9\x44\xed\xb3\x4d\xe3\xba\xf4\x6c\x0c\x96\xc2\x3f\x47\x26\x4d\x78\x07" +
	"\x00\x00\xff\xff\x88\xe7\x4d\x4d\x42\x01\x00\x00")

func vim_templateVimrcLocalBundlesExampleBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateVimrcLocalBundlesExample,
		"vim_template/vimrc.local.bundles.example",
	)
}

func vim_templateVimrcLocalBundlesExample() (*asset, error) {
	bytes, err := vim_templateVimrcLocalBundlesExampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/vimrc.local.bundles.example", size: 322, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vim_templateVimrcLocalExample = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\xf0\xad\x74\xce\xcf\x4b\xe3\xca\x49\x2d\x51\x48\xb7\x2a\xce\xcb" +
	"\x2c\x28\x8e\x4f\x2c\x2d\xc9\xc8\x2f\x52\xb0\x55\x50\x8a\xcc\x2f\x55\xf0\x4b\xcc\x4d\x55\xe2\x02\x04\x00\x00\xff" +
	"\xff\x5c\xd4\x81\xc1\x29\x00\x00\x00")

func vim_templateVimrcLocalExampleBytes() ([]byte, error) {
	return bindataRead(
		_vim_templateVimrcLocalExample,
		"vim_template/vimrc.local.example",
	)
}

func vim_templateVimrcLocalExample() (*asset, error) {
	bytes, err := vim_templateVimrcLocalExampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vim_template/vimrc.local.example", size: 41, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510431351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// AssetNames returns the names of the assets.
// nolint: deadcode
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"vim_template/langs/c/c.bundle":                   vim_templateLangsCCBundle,
	"vim_template/langs/c/c.vim":                      vim_templateLangsCCVim,
	"vim_template/langs/elixir/elixir.bundle":         vim_templateLangsElixirElixirBundle,
	"vim_template/langs/elixir/elixir.vim":            vim_templateLangsElixirElixirVim,
	"vim_template/langs/elm/elm.bundle":               vim_templateLangsElmElmBundle,
	"vim_template/langs/elm/elm.vim":                  vim_templateLangsElmElmVim,
	"vim_template/langs/erlang/erlang.bundle":         vim_templateLangsErlangErlangBundle,
	"vim_template/langs/erlang/erlang.vim":            vim_templateLangsErlangErlangVim,
	"vim_template/langs/go/go.bundle":                 vim_templateLangsGoGoBundle,
	"vim_template/langs/go/go.vim":                    vim_templateLangsGoGoVim,
	"vim_template/langs/haskell/haskell.bundle":       vim_templateLangsHaskellHaskellBundle,
	"vim_template/langs/haskell/haskell.sh":           vim_templateLangsHaskellHaskellSh,
	"vim_template/langs/haskell/haskell.vim":          vim_templateLangsHaskellHaskellVim,
	"vim_template/langs/html/html.bundle":             vim_templateLangsHtmlHtmlBundle,
	"vim_template/langs/html/html.vim":                vim_templateLangsHtmlHtmlVim,
	"vim_template/langs/javascript/javascript.bundle": vim_templateLangsJavascriptJavascriptBundle,
	"vim_template/langs/javascript/javascript.vim":    vim_templateLangsJavascriptJavascriptVim,
	"vim_template/langs/lisp/lisp.bundle":             vim_templateLangsLispLispBundle,
	"vim_template/langs/lisp/lisp.vim":                vim_templateLangsLispLispVim,
	"vim_template/langs/lua/lua.bundle":               vim_templateLangsLuaLuaBundle,
	"vim_template/langs/lua/lua.vim":                  vim_templateLangsLuaLuaVim,
	"vim_template/langs/ocaml/ocaml.bundle":           vim_templateLangsOcamlOcamlBundle,
	"vim_template/langs/ocaml/ocaml.vim":              vim_templateLangsOcamlOcamlVim,
	"vim_template/langs/perl/perl.bundle":             vim_templateLangsPerlPerlBundle,
	"vim_template/langs/perl/perl.vim":                vim_templateLangsPerlPerlVim,
	"vim_template/langs/php/php.bundle":               vim_templateLangsPhpPhpBundle,
	"vim_template/langs/php/php.vim":                  vim_templateLangsPhpPhpVim,
	"vim_template/langs/python/python.bundle":         vim_templateLangsPythonPythonBundle,
	"vim_template/langs/python/python.vim":            vim_templateLangsPythonPythonVim,
	"vim_template/langs/ruby/ruby.bundle":             vim_templateLangsRubyRubyBundle,
	"vim_template/langs/ruby/ruby.vim":                vim_templateLangsRubyRubyVim,
	"vim_template/langs/rust/rust.bundle":             vim_templateLangsRustRustBundle,
	"vim_template/langs/rust/rust.vim":                vim_templateLangsRustRustVim,
	"vim_template/langs/scala/scala.bundle":           vim_templateLangsScalaScalaBundle,
	"vim_template/langs/scala/scala.vim":              vim_templateLangsScalaScalaVim,
	"vim_template/vimrc":                              vim_templateVimrc,
	"vim_template/vimrc.local.bundles.example":        vim_templateVimrcLocalBundlesExample,
	"vim_template/vimrc.local.example":                vim_templateVimrcLocalExample,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"vim_template": {nil, map[string]*bintree{
		"langs": {nil, map[string]*bintree{
			"c": {nil, map[string]*bintree{
				"c.bundle": {vim_templateLangsCCBundle, map[string]*bintree{}},
				"c.vim": {vim_templateLangsCCVim, map[string]*bintree{}},
			}},
			"elixir": {nil, map[string]*bintree{
				"elixir.bundle": {vim_templateLangsElixirElixirBundle, map[string]*bintree{}},
				"elixir.vim": {vim_templateLangsElixirElixirVim, map[string]*bintree{}},
			}},
			"elm": {nil, map[string]*bintree{
				"elm.bundle": {vim_templateLangsElmElmBundle, map[string]*bintree{}},
				"elm.vim": {vim_templateLangsElmElmVim, map[string]*bintree{}},
			}},
			"erlang": {nil, map[string]*bintree{
				"erlang.bundle": {vim_templateLangsErlangErlangBundle, map[string]*bintree{}},
				"erlang.vim": {vim_templateLangsErlangErlangVim, map[string]*bintree{}},
			}},
			"go": {nil, map[string]*bintree{
				"go.bundle": {vim_templateLangsGoGoBundle, map[string]*bintree{}},
				"go.vim": {vim_templateLangsGoGoVim, map[string]*bintree{}},
			}},
			"haskell": {nil, map[string]*bintree{
				"haskell.bundle": {vim_templateLangsHaskellHaskellBundle, map[string]*bintree{}},
				"haskell.sh": {vim_templateLangsHaskellHaskellSh, map[string]*bintree{}},
				"haskell.vim": {vim_templateLangsHaskellHaskellVim, map[string]*bintree{}},
			}},
			"html": {nil, map[string]*bintree{
				"html.bundle": {vim_templateLangsHtmlHtmlBundle, map[string]*bintree{}},
				"html.vim": {vim_templateLangsHtmlHtmlVim, map[string]*bintree{}},
			}},
			"javascript": {nil, map[string]*bintree{
				"javascript.bundle": {vim_templateLangsJavascriptJavascriptBundle, map[string]*bintree{}},
				"javascript.vim": {vim_templateLangsJavascriptJavascriptVim, map[string]*bintree{}},
			}},
			"lisp": {nil, map[string]*bintree{
				"lisp.bundle": {vim_templateLangsLispLispBundle, map[string]*bintree{}},
				"lisp.vim": {vim_templateLangsLispLispVim, map[string]*bintree{}},
			}},
			"lua": {nil, map[string]*bintree{
				"lua.bundle": {vim_templateLangsLuaLuaBundle, map[string]*bintree{}},
				"lua.vim": {vim_templateLangsLuaLuaVim, map[string]*bintree{}},
			}},
			"ocaml": {nil, map[string]*bintree{
				"ocaml.bundle": {vim_templateLangsOcamlOcamlBundle, map[string]*bintree{}},
				"ocaml.vim": {vim_templateLangsOcamlOcamlVim, map[string]*bintree{}},
			}},
			"perl": {nil, map[string]*bintree{
				"perl.bundle": {vim_templateLangsPerlPerlBundle, map[string]*bintree{}},
				"perl.vim": {vim_templateLangsPerlPerlVim, map[string]*bintree{}},
			}},
			"php": {nil, map[string]*bintree{
				"php.bundle": {vim_templateLangsPhpPhpBundle, map[string]*bintree{}},
				"php.vim": {vim_templateLangsPhpPhpVim, map[string]*bintree{}},
			}},
			"python": {nil, map[string]*bintree{
				"python.bundle": {vim_templateLangsPythonPythonBundle, map[string]*bintree{}},
				"python.vim": {vim_templateLangsPythonPythonVim, map[string]*bintree{}},
			}},
			"ruby": {nil, map[string]*bintree{
				"ruby.bundle": {vim_templateLangsRubyRubyBundle, map[string]*bintree{}},
				"ruby.vim": {vim_templateLangsRubyRubyVim, map[string]*bintree{}},
			}},
			"rust": {nil, map[string]*bintree{
				"rust.bundle": {vim_templateLangsRustRustBundle, map[string]*bintree{}},
				"rust.vim": {vim_templateLangsRustRustVim, map[string]*bintree{}},
			}},
			"scala": {nil, map[string]*bintree{
				"scala.bundle": {vim_templateLangsScalaScalaBundle, map[string]*bintree{}},
				"scala.vim": {vim_templateLangsScalaScalaVim, map[string]*bintree{}},
			}},
		}},
		"vimrc": {vim_templateVimrc, map[string]*bintree{}},
		"vimrc.local.bundles.example": {vim_templateVimrcLocalBundlesExample, map[string]*bintree{}},
		"vimrc.local.example": {vim_templateVimrcLocalExample, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
